######## Photonico Light

#### Left

  typeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(
    os_icon                 # os identifier
    context                 # user@hostname
    dir                     # current directory
    vcs                     # git status
    prompt_char             # prompt symbol
  )

## OS identifier color.
  typeset -g POWERLEVEL9K_OS_ICON_FOREGROUND="#F0F0F0"
  typeset -g POWERLEVEL9K_OS_ICON_BACKGROUND="#8C64FF"

## context: user@hostname
  # Context color when running with privileges.
  typeset -g POWERLEVEL9K_CONTEXT_ROOT_FOREGROUND="#FFD200"
  typeset -g POWERLEVEL9K_CONTEXT_ROOT_BACKGROUND="#5f87ff"
  # Context color in SSH without privileges.
  typeset -g POWERLEVEL9K_CONTEXT_{REMOTE,REMOTE_SUDO}_FOREGROUND="#E1FF37"
  typeset -g POWERLEVEL9K_CONTEXT_{REMOTE,REMOTE_SUDO}_BACKGROUND="#5f87ff"
  # Default context color (no privileges, no SSH).
  typeset -g POWERLEVEL9K_CONTEXT_FOREGROUND="#F0F0F0"
  typeset -g POWERLEVEL9K_CONTEXT_BACKGROUND="#6482FF"

  # Don't show context unless running with privileges or in SSH.
  # Tip: Remove the next line to always show context.
  # typeset -g POWERLEVEL9K_CONTEXT_{DEFAULT,SUDO}_{CONTENT,VISUAL_IDENTIFIER}_EXPANSION=

## dir: current directory
  # Current directory background color.
  typeset -g POWERLEVEL9K_DIR_BACKGROUND="#14A0F0"
  # Default current directory foreground color.
  typeset -g POWERLEVEL9K_DIR_FOREGROUND="#F0F0F0"
  # If directory is too long, shorten some of its segments to the shortest possible unique
  # prefix. The shortened directory can be tab-completed to the original.
  typeset -g POWERLEVEL9K_SHORTEN_STRATEGY=truncate_to_unique
  # Replace removed segment suffixes with this symbol.
  typeset -g POWERLEVEL9K_SHORTEN_DELIMITER=
  # Color of the shortened directory segments.
  typeset -g POWERLEVEL9K_DIR_SHORTENED_FOREGROUND=250
  # Color of the anchor directory segments. Anchor segments are never shortened. The first
  # segment is always an anchor.
  typeset -g POWERLEVEL9K_DIR_ANCHOR_FOREGROUND=255
  # Display anchor directory segments in bold.
  typeset -g POWERLEVEL9K_DIR_ANCHOR_BOLD=true
  # Don't shorten directories that contain any of these files. They are anchors.

## vcs: git status
# Version control system colors.
	typeset -g POWERLEVEL9K_VCS_CLEAN_BACKGROUND="#0078A0"
  typeset -g POWERLEVEL9K_VCS_CLEAN_FOREGROUND="#F0F0F0"

	typeset -g POWERLEVEL9K_VCS_MODIFIED_BACKGROUND="#14BE6E"
  typeset -g POWERLEVEL9K_VCS_MODIFIED_FOREGROUND="#F0F0F0"

	typeset -g POWERLEVEL9K_VCS_UNTRACKED_BACKGROUND="#0078A0"
  typeset -g POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND="#F0F0F0"

	typeset -g POWERLEVEL9K_VCS_CONFLICTED_BACKGROUND="#FFC814"
	typeset -g POWERLEVEL9K_VCS_CONFLICTED_FOREGROUND="#F0F0F0"

	typeset -g POWERLEVEL9K_VCS_LOADING_BACKGROUND="#555555"
	typeset -g POWERLEVEL9K_VCS_LOADING_FOREGROUND="#F0F0F0"

  # Replace these:
  local       meta='%226F'
  local      clean='%255F'
  local   modified='%255F'
  local  untracked='%255F'
  local conflicted='%202F'

## prompt_char: prompt symbol
  # Transparent background.
  typeset -g POWERLEVEL9K_PROMPT_CHAR_BACKGROUND=
  # Green prompt symbol if the last command succeeded.
  typeset -g POWERLEVEL9K_PROMPT_CHAR_OK_{VIINS,VICMD,VIVIS,VIOWR}_FOREGROUND="#64D787"
  # Red prompt symbol if the last command failed.
  typeset -g POWERLEVEL9K_PROMPT_CHAR_ERROR_{VIINS,VICMD,VIVIS,VIOWR}_FOREGROUND="#FF5A00"

#### Right

  typeset -g POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(
    status                  # exit code of the last command
    command_execution_time  # duration of the last command
    background_jobs         # presence of background jobs
    direnv                  # direnv status (https://direnv.net/)
    asdf                    # asdf version manager (https://github.com/asdf-vm/asdf)
    virtualenv              # python virtual environment (https://docs.python.org/3/library/venv.html)
    anaconda                # conda environment (https://conda.io/)
    pyenv                   # python environment (https://github.com/pyenv/pyenv)
    goenv                   # go environment (https://github.com/syndbg/goenv)
    nodenv                  # node.js version from nodenv (https://github.com/nodenv/nodenv)
    nvm                     # node.js version from nvm (https://github.com/nvm-sh/nvm)
    nodeenv                 # node.js environment (https://github.com/ekalinin/nodeenv)
    # node_version          # node.js version
    # go_version            # go version (https://golang.org)
    # rust_version          # rustc version (https://www.rust-lang.org)
    # dotnet_version        # .NET version (https://dotnet.microsoft.com)
    # php_version           # php version (https://www.php.net/)
    # laravel_version       # laravel php framework version (https://laravel.com/)
    # java_version          # java version (https://www.java.com/)
    # package               # name@version from package.json (https://docs.npmjs.com/files/package.json)
    rbenv                   # ruby version from rbenv (https://github.com/rbenv/rbenv)
    rvm                     # ruby version from rvm (https://rvm.io)
    fvm                     # flutter version management (https://github.com/leoafarias/fvm)
    luaenv                  # lua version from luaenv (https://github.com/cehoffman/luaenv)
    jenv                    # java version from jenv (https://github.com/jenv/jenv)
    plenv                   # perl version from plenv (https://github.com/tokuhirom/plenv)
    phpenv                  # php version from phpenv (https://github.com/phpenv/phpenv)
    scalaenv                # scala version from scalaenv (https://github.com/scalaenv/scalaenv)
    haskell_stack           # haskell version from stack (https://haskellstack.org/)
    kubecontext             # current kubernetes context (https://kubernetes.io/)
    terraform               # terraform workspace (https://www.terraform.io)
    # terraform_version     # terraform version (https://www.terraform.io)
    aws                     # aws profile (https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html)
    aws_eb_env              # aws elastic beanstalk environment (https://aws.amazon.com/elasticbeanstalk/)
    azure                   # azure account name (https://docs.microsoft.com/en-us/cli/azure)
    gcloud                  # google cloud cli account and project (https://cloud.google.com/)
    google_app_cred         # google application credentials (https://cloud.google.com/docs/authentication/production)
    toolbox                 # toolbox name (https://github.com/containers/toolbox)
    # context               # user@hostname
    nordvpn                 # nordvpn connection status, linux only (https://nordvpn.com/)
    ranger                  # ranger shell (https://github.com/ranger/ranger)
    nnn                     # nnn shell (https://github.com/jarun/nnn)
    xplr                    # xplr shell (https://github.com/sayanarijit/xplr)
    vim_shell               # vim shell indicator (:sh)
    midnight_commander      # midnight commander shell (https://midnight-commander.org/)
    # nix_shell             # nix shell (https://nixos.org/nixos/nix-pills/developing-with-nix-shell.html)
    vi_mode                 # vi mode (you don't need this if you've enabled prompt_char)
    # vpn_ip                # virtual private network indicator
    # load                  # CPU load
    # disk_usage            # disk usage
    ram                     # free RAM
    # swap                  # used swap
    todo                    # todo items (https://github.com/todotxt/todo.txt-cli)
    timewarrior             # timewarrior tracking status (https://timewarrior.net/)
    taskwarrior             # taskwarrior task count (https://taskwarrior.org/)
    time                    # current time
    # ip                    # ip address and bandwidth usage for a specified network interface
    # public_ip             # public IP address
    # proxy                 # system-wide http/https/ftp proxy
    # battery               # internal battery
    # wifi                  # wifi speed
    # example               # example user-defined segment (see prompt_example function below)
  )


## time: current time
  # Current time color.
	typeset -g POWERLEVEL9K_TIME_FOREGROUND="#F0F0F0"
	typeset -g POWERLEVEL9K_TIME_BACKGROUND="#6482FF"

## taskwarrior

## timewarrior

## todo

## ram
  # RAM color.
  typeset -g POWERLEVEL9K_RAM_FOREGROUND="#F0F0F0"
  typeset -g POWERLEVEL9K_RAM_BACKGROUND="#F0B414"

## vi_mode 

## midnight commander

## vim shell
  # Vim shell indicator color.
  typeset -g POWERLEVEL9K_VIM_SHELL_FOREGROUND="#F0F0F0"
  typeset -g POWERLEVEL9K_VIM_SHELL_BACKGROUND="#5ADC5A"

## xplr

## nnn

## ranger

## toolbox

## fvm

## rvm

## rbenv

## nodeenv

## nvm

## nodenv

## goenv

## pyenv

## anaconda

## virtualenv

## asdf

## direnv

## background jobs
  # Background jobs color.
  typeset -g POWERLEVEL9K_BACKGROUND_JOBS_FOREGROUND="#F0F0F0"
  typeset -g POWERLEVEL9K_BACKGROUND_JOBS_BACKGROUND="#7896F0"
  # Don't show the number of background jobs.
  typeset -g POWERLEVEL9K_BACKGROUND_JOBS_VERBOSE=true

## command_execution_time: duration of the last command
	# Execution time color.
		typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND="#F0F0F0"
		typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_BACKGROUND="#5ADC5A"
	# Show duration of the last command if takes longer than this many seconds.
		typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD="#5ADC5A"
	# Show this many fractional digits. Zero means round to seconds.
		typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_PRECISION="#F0F0F0"

## status
  # Enable OK_PIPE, ERROR_PIPE and ERROR_SIGNAL status states to allow us to enable, disable and
  # style them independently from the regular OK and ERROR state.
  typeset -g POWERLEVEL9K_STATUS_EXTENDED_STATES=true

  # Status on success. No content, just an icon. No need to show it if prompt_char is enabled as
  # it will signify success by turning green.
  typeset -g POWERLEVEL9K_STATUS_OK=true
  typeset -g POWERLEVEL9K_STATUS_OK_VISUAL_IDENTIFIER_EXPANSION='✔'
  typeset -g POWERLEVEL9K_STATUS_OK_FOREGROUND="#5FD787"
  typeset -g POWERLEVEL9K_STATUS_OK_BACKGROUND="#8C8C8C"

  # Status when some part of a pipe command fails but the overall exit status is zero. It may look
  # like this: 1|0.
  typeset -g POWERLEVEL9K_STATUS_OK_PIPE=true
  typeset -g POWERLEVEL9K_STATUS_OK_PIPE_VISUAL_IDENTIFIER_EXPANSION='✔'
  typeset -g POWERLEVEL9K_STATUS_OK_PIPE_FOREGROUND="#5FD787"
  typeset -g POWERLEVEL9K_STATUS_OK_PIPE_BACKGROUND="#8C8C8C"

  # Status when it's just an error code (e.g., '1'). No need to show it if prompt_char is enabled as
  # it will signify error by turning red.
  typeset -g POWERLEVEL9K_STATUS_ERROR=true
  typeset -g POWERLEVEL9K_STATUS_ERROR_VISUAL_IDENTIFIER_EXPANSION='✘'
  typeset -g POWERLEVEL9K_STATUS_ERROR_FOREGROUND="#FF5A00"
  typeset -g POWERLEVEL9K_STATUS_ERROR_BACKGROUND="#8C8C8C"

  # Status when the last command was terminated by a signal.
  typeset -g POWERLEVEL9K_STATUS_ERROR_SIGNAL=true
  # Use terse signal names: "INT" instead of "SIGINT(2)".
  typeset -g POWERLEVEL9K_STATUS_VERBOSE_SIGNAME=false
  typeset -g POWERLEVEL9K_STATUS_ERROR_SIGNAL_VISUAL_IDENTIFIER_EXPANSION='✘'
  typeset -g POWERLEVEL9K_STATUS_ERROR_SIGNAL_FOREGROUND="#FF5A00"
  typeset -g POWERLEVEL9K_STATUS_ERROR_SIGNAL_BACKGROUND="#8C8C8C"

  # Status when some part of a pipe command fails and the overall exit status is also non-zero.
  # It may look like this: 1|0.
  typeset -g POWERLEVEL9K_STATUS_ERROR_PIPE=true
  typeset -g POWERLEVEL9K_STATUS_ERROR_PIPE_VISUAL_IDENTIFIER_EXPANSION='✘'
  typeset -g POWERLEVEL9K_STATUS_ERROR_PIPE_FOREGROUND="#FF5A00"
  typeset -g POWERLEVEL9K_STATUS_ERROR_PIPE_BACKGROUND="#8C8C8C"
